// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/18/2024 00:13:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    calculadora
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module calculadora_vlg_sample_tst(
	na_1,
	na_2,
	na_3,
	na_4,
	na_5,
	na_6,
	nb_1,
	nb_2,
	nb_3,
	nb_4,
	nb_5,
	nb_6,
	sub,
	sampler_tx
);
input  na_1;
input  na_2;
input  na_3;
input  na_4;
input  na_5;
input  na_6;
input  nb_1;
input  nb_2;
input  nb_3;
input  nb_4;
input  nb_5;
input  nb_6;
input  sub;
output sampler_tx;

reg sample;
time current_time;
always @(na_1 or na_2 or na_3 or na_4 or na_5 or na_6 or nb_1 or nb_2 or nb_3 or nb_4 or nb_5 or nb_6 or sub)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module calculadora_vlg_check_tst (
	r1,
	r2,
	r3,
	r4,
	r5,
	r6,
	sampler_rx
);
input  r1;
input  r2;
input  r3;
input  r4;
input  r5;
input  r6;
input sampler_rx;

reg  r1_expected;
reg  r2_expected;
reg  r3_expected;
reg  r4_expected;
reg  r5_expected;
reg  r6_expected;

reg  r1_prev;
reg  r2_prev;
reg  r3_prev;
reg  r4_prev;
reg  r5_prev;
reg  r6_prev;

reg  r1_expected_prev;
reg  r2_expected_prev;
reg  r3_expected_prev;
reg  r4_expected_prev;
reg  r5_expected_prev;
reg  r6_expected_prev;

reg  last_r1_exp;
reg  last_r2_exp;
reg  last_r3_exp;
reg  last_r4_exp;
reg  last_r5_exp;
reg  last_r6_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	r1_prev = r1;
	r2_prev = r2;
	r3_prev = r3;
	r4_prev = r4;
	r5_prev = r5;
	r6_prev = r6;
end

// update expected /o prevs

always @(trigger)
begin
	r1_expected_prev = r1_expected;
	r2_expected_prev = r2_expected;
	r3_expected_prev = r3_expected;
	r4_expected_prev = r4_expected;
	r5_expected_prev = r5_expected;
	r6_expected_prev = r6_expected;
end



// expected r1
initial
begin
	r1_expected = 1'bX;
end 

// expected r2
initial
begin
	r2_expected = 1'bX;
end 

// expected r3
initial
begin
	r3_expected = 1'bX;
end 

// expected r4
initial
begin
	r4_expected = 1'bX;
end 

// expected r5
initial
begin
	r5_expected = 1'bX;
end 

// expected r6
initial
begin
	r6_expected = 1'bX;
end 
// generate trigger
always @(r1_expected or r1 or r2_expected or r2 or r3_expected or r3 or r4_expected or r4 or r5_expected or r5 or r6_expected or r6)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected r1 = %b | expected r2 = %b | expected r3 = %b | expected r4 = %b | expected r5 = %b | expected r6 = %b | ",r1_expected_prev,r2_expected_prev,r3_expected_prev,r4_expected_prev,r5_expected_prev,r6_expected_prev);
	$display("| real r1 = %b | real r2 = %b | real r3 = %b | real r4 = %b | real r5 = %b | real r6 = %b | ",r1_prev,r2_prev,r3_prev,r4_prev,r5_prev,r6_prev);
`endif
	if (
		( r1_expected_prev !== 1'bx ) && ( r1_prev !== r1_expected_prev )
		&& ((r1_expected_prev !== last_r1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_r1_exp = r1_expected_prev;
	end
	if (
		( r2_expected_prev !== 1'bx ) && ( r2_prev !== r2_expected_prev )
		&& ((r2_expected_prev !== last_r2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_r2_exp = r2_expected_prev;
	end
	if (
		( r3_expected_prev !== 1'bx ) && ( r3_prev !== r3_expected_prev )
		&& ((r3_expected_prev !== last_r3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r3_expected_prev);
		$display ("     Real value = %b", r3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_r3_exp = r3_expected_prev;
	end
	if (
		( r4_expected_prev !== 1'bx ) && ( r4_prev !== r4_expected_prev )
		&& ((r4_expected_prev !== last_r4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r4_expected_prev);
		$display ("     Real value = %b", r4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_r4_exp = r4_expected_prev;
	end
	if (
		( r5_expected_prev !== 1'bx ) && ( r5_prev !== r5_expected_prev )
		&& ((r5_expected_prev !== last_r5_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r5_expected_prev);
		$display ("     Real value = %b", r5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_r5_exp = r5_expected_prev;
	end
	if (
		( r6_expected_prev !== 1'bx ) && ( r6_prev !== r6_expected_prev )
		&& ((r6_expected_prev !== last_r6_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r6_expected_prev);
		$display ("     Real value = %b", r6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_r6_exp = r6_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module calculadora_vlg_vec_tst();
// constants                                           
// general purpose registers
reg na_1;
reg na_2;
reg na_3;
reg na_4;
reg na_5;
reg na_6;
reg nb_1;
reg nb_2;
reg nb_3;
reg nb_4;
reg nb_5;
reg nb_6;
reg sub;
// wires                                               
wire r1;
wire r2;
wire r3;
wire r4;
wire r5;
wire r6;

wire sampler;                             

// assign statements (if any)                          
calculadora i1 (
// port map - connection between master ports and signals/registers   
	.na_1(na_1),
	.na_2(na_2),
	.na_3(na_3),
	.na_4(na_4),
	.na_5(na_5),
	.na_6(na_6),
	.nb_1(nb_1),
	.nb_2(nb_2),
	.nb_3(nb_3),
	.nb_4(nb_4),
	.nb_5(nb_5),
	.nb_6(nb_6),
	.r1(r1),
	.r2(r2),
	.r3(r3),
	.r4(r4),
	.r5(r5),
	.r6(r6),
	.sub(sub)
);

// na_1
initial
begin
	na_1 = 1'b0;
end 

// na_2
initial
begin
	na_2 = 1'b0;
end 

// na_3
initial
begin
	na_3 = 1'b0;
end 

// na_4
initial
begin
	na_4 = 1'b0;
end 

// na_5
initial
begin
	na_5 = 1'b0;
end 

// na_6
initial
begin
	na_6 = 1'b0;
end 

// nb_1
initial
begin
	nb_1 = 1'b1;
end 

// nb_2
initial
begin
	nb_2 = 1'b0;
end 

// nb_3
initial
begin
	nb_3 = 1'b0;
end 

// nb_4
initial
begin
	nb_4 = 1'b0;
end 

// nb_5
initial
begin
	nb_5 = 1'b0;
end 

// nb_6
initial
begin
	nb_6 = 1'b0;
end 

// sub
initial
begin
	sub = 1'b0;
end 

calculadora_vlg_sample_tst tb_sample (
	.na_1(na_1),
	.na_2(na_2),
	.na_3(na_3),
	.na_4(na_4),
	.na_5(na_5),
	.na_6(na_6),
	.nb_1(nb_1),
	.nb_2(nb_2),
	.nb_3(nb_3),
	.nb_4(nb_4),
	.nb_5(nb_5),
	.nb_6(nb_6),
	.sub(sub),
	.sampler_tx(sampler)
);

calculadora_vlg_check_tst tb_out(
	.r1(r1),
	.r2(r2),
	.r3(r3),
	.r4(r4),
	.r5(r5),
	.r6(r6),
	.sampler_rx(sampler)
);
endmodule

